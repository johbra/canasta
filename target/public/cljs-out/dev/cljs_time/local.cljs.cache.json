["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Date",["^ ","~$prototype",["^ ","~$cljs-time$local$ILocalCoerce$",["^ "],"~$cljs-time$local$ILocalCoerce$to_local_date_time$arity$1",["^ "]]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$cljs-time.local","~:imports",null,"~:requires",["^ ","~$time","~$cljs-time.core","^?","^?","~$coerce","~$cljs-time.coerce","^A","^A","~$fmt","~$cljs-time.format","^C","^C","~$goog.date.DateTime","^D"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$*local-formatters*",["^ ","~:meta",["^ ","~:file","/Users/jb/tmp/canasta/target/public/cljs-out/dev/cljs_time/local.cljs","~:line",34,"~:column",3,"~:end-line",34,"~:end-column",21,"~:doc","Map of local formatters for parsing and printing.","~:dynamic",true],"^:","~$cljs-time.local/*local-formatters*","^J","target/public/cljs-out/dev/cljs_time/local.cljs","^N",21,"^L",1,"^P",true,"^K",33,"^M",34,"~:tag","~$any","^O","Map of local formatters for parsing and printing."],"~$local-now",["^ ","~:protocol-inline",null,"^I",["^ ","^J","/Users/jb/tmp/canasta/target/public/cljs-out/dev/cljs_time/local.cljs","^K",42,"^L",7,"^M",42,"^N",16,"~:arglists",["~#list",["~$quote",["^W",[[]]]]],"^O","Returns a DateTime for the current instant in the default time zone."],"^:","~$cljs-time.local/local-now","^J","target/public/cljs-out/dev/cljs_time/local.cljs","^N",16,"~:method-params",["^W",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^W",[null,null]],"^L",1,"~:variadic?",false,"^K",42,"~:ret-tag","~$goog.date/DateTime","^M",42,"~:max-fixed-arity",0,"~:fn-var",true,"^V",["^W",["^X",["^W",[[]]]]],"^O","Returns a DateTime for the current instant in the default time zone."],"~$ILocalCoerce",["^ ","^I",["^ ","^J","/Users/jb/tmp/canasta/target/public/cljs-out/dev/cljs_time/local.cljs","^K",47,"^L",14,"^M",47,"^N",26,"~:protocol-symbol",true,"~:jsdoc",["^W",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$to-local-date-time",[["~$obj"]]]],"~:sigs",["^ ","~:to-local-date-time",["^ ","^:","^1;","^V",["^W",[["^1<"]]],"^O","convert `obj` to a local goog.date\n                             DateTime instance retaining time fields."]]],"^17",true,"^:","~$cljs-time.local/ILocalCoerce","^J","target/public/cljs-out/dev/cljs_time/local.cljs","^N",26,"^L",1,"^K",47,"^19",["^ ","^1:",["^ ","^1;",[["^1<"]]]],"~:info",null,"^M",47,"^R","^S","^1=",["^ ","^1>",["^ ","^:","^1;","^V",["^W",[["^1<"]]],"^O","convert `obj` to a local goog.date\n                             DateTime instance retaining time fields."]],"~:impls",["^9",[null,"~$js/Date","^13","~$number","~$string"]],"^18",["^W",["@interface"]]],"^1;",["^ ","^U",null,"^I",["^ ","^J","/Users/jb/tmp/canasta/target/public/cljs-out/dev/cljs_time/local.cljs","^K",48,"^L",4,"^M",48,"^N",22,"~:protocol","^1?","^O","convert `obj` to a local goog.date\n                             DateTime instance retaining time fields.","^V",["^W",["^X",["^W",[["^1<"]]]]]],"^1E","^1?","^:","~$cljs-time.local/to-local-date-time","^J","target/public/cljs-out/dev/cljs_time/local.cljs","^N",22,"^Z",["^W",[["^1<"]]],"^[",null,"^10",["^W",[null,null]],"^L",1,"^11",false,"^K",47,"^12","^S","^M",48,"^14",1,"^15",true,"^V",["^W",["^X",["^W",[["^1<"]]]]],"^O","convert `obj` to a local goog.date\n                             DateTime instance retaining time fields."],"~$as-local-date-time-from-time-zone",["^ ","^U",null,"^I",["^ ","^J","/Users/jb/tmp/canasta/target/public/cljs-out/dev/cljs_time/local.cljs","^K",51,"^L",8,"^M",51,"^N",41,"~:private",true,"^V",["^W",["^X",["^W",[["^1<"]]]]],"^O","Coerce to date-time in the default time zone retaining time fields."],"^1H",true,"^:","~$cljs-time.local/as-local-date-time-from-time-zone","^J","target/public/cljs-out/dev/cljs_time/local.cljs","^N",41,"^Z",["^W",[["^1<"]]],"^[",null,"^10",["^W",[null,null]],"^L",1,"^11",false,"^K",51,"^12",["^9",["^13","~$clj-nil"]],"^M",51,"^14",1,"^15",true,"^V",["^W",["^X",["^W",[["^1<"]]]]],"^O","Coerce to date-time in the default time zone retaining time fields."],"~$as-local-date-time-to-time-zone",["^ ","^U",null,"^I",["^ ","^J","/Users/jb/tmp/canasta/target/public/cljs-out/dev/cljs_time/local.cljs","^K",56,"^L",8,"^M",56,"^N",39,"^1H",true,"^V",["^W",["^X",["^W",[["^1<"]]]]],"^O","Coerce to date-time in the default time zone."],"^1H",true,"^:","~$cljs-time.local/as-local-date-time-to-time-zone","^J","target/public/cljs-out/dev/cljs_time/local.cljs","^N",39,"^Z",["^W",[["^1<"]]],"^[",null,"^10",["^W",[null,null]],"^L",1,"^11",false,"^K",56,"^12","^13","^M",56,"^14",1,"^15",true,"^V",["^W",["^X",["^W",[["^1<"]]]]],"^O","Coerce to date-time in the default time zone."],"~$from-local-string",["^ ","^U",null,"^I",["^ ","^J","/Users/jb/tmp/canasta/target/public/cljs-out/dev/cljs_time/local.cljs","^K",61,"^L",8,"^M",61,"^N",25,"^1H",true,"^V",["^W",["^X",["^W",[["~$s"]]]]],"^O","Return local DateTime instance from string using\n  formatters in *local-formatters*, returning first\n  which parses."],"^1H",true,"^:","~$cljs-time.local/from-local-string","^J","target/public/cljs-out/dev/cljs_time/local.cljs","^N",25,"^Z",["^W",[["~$s"]]],"^[",null,"^10",["^W",[null,null]],"^L",1,"^11",false,"^K",61,"^12",["^9",["^S","^1J"]],"^M",61,"^14",1,"^15",true,"^V",["^W",["^X",["^W",[["~$s"]]]]],"^O","Return local DateTime instance from string using\n  formatters in *local-formatters*, returning first\n  which parses."],"~$format-local-time",["^ ","^U",null,"^I",["^ ","^J","/Users/jb/tmp/canasta/target/public/cljs-out/dev/cljs_time/local.cljs","^K",92,"^L",7,"^M",92,"^N",24,"^V",["^W",["^X",["^W",[["^1<","~$format-key"]]]]],"^O","Format obj as local time using the local formatter corresponding\n  to format-key."],"^:","~$cljs-time.local/format-local-time","^J","target/public/cljs-out/dev/cljs_time/local.cljs","^N",24,"^Z",["^W",[["^1<","^1P"]]],"^[",null,"^10",["^W",[null,null]],"^L",1,"^11",false,"^K",92,"^12",["^9",["^S","^1J"]],"^M",92,"^14",2,"^15",true,"^V",["^W",["^X",["^W",[["^1<","^1P"]]]]],"^O","Format obj as local time using the local formatter corresponding\n  to format-key."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~:else","~:type","~:parser","~:fmt/formatter"]],"~:order",["^1W","^1Y","^1X","^1V"]],"^O","Functions for working with local time without having to shift\n  to/from utc, the preferred time zone of `clj-time.core`.\n\n  Get the current local time with `(local-now)`.\n  `(to-local-date-time obj)` returns a local date-time instance\n  retaining the time fields.\n\n  The following all return `1986-10-14 04:03:27.246` with the\n  local time zone.\n\n```clojure\n(to-local-date-time (clj-time.core/date-time 1986 10 14 4 3 27 246))\n(to-local-date-time \"1986-10-14T04:03:27.246\")\n(to-local-date-time \"1986-10-14T04:03:27.246Z\")\n```\n\n  The dynamic var *local-formatters* contains a map of local formatters\n  for parsing and printing. It is initialized with all the formatters in\n  `clj-time.format` localized.\n\n  to-local-date-time for strings uses *local-formatters* to parse.\n  `(format-local-time (local-now) :basic-date-time)` formats an obj using\n  a formatter in `*local-formatters*` corresponding to the format-key\n  passed in.\n  "]